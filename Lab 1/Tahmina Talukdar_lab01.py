# -*- coding: utf-8 -*-
"""Tahmina Talukdar_20301412_02_LAB01

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/191Lb2U94s8i7boaFAA3jjOPkcnLP6STm
"""

#File read
lines = open('input.txt', 'r')
chr = []
keyword =[]
for i in lines:
  i =  i.strip()
  for m in i.split(" "):
      chr.append(m)
#print(chr)


def key_func(chr,keyword):
  py_key = ['int','float','if','elif','else',"break", "case", "char", "const", "continue", "default", "do", "double"]

  for i in chr:
        if i in py_key:
            keyword.append(i)
  keyword = set(keyword)
  key_str = "Keywords: "
  #print(key_str)

  for i in keyword:
        key_str += i + ", "
    # print(key_str[0: -2])
  return keyword, key_str[0:-2]     #removes the last two characters (", ")


def func_math_operator(chr):
    math_op = ['=','+','-','*','/','//','%','+=']
    operator = []
    for i in chr:
        if i in math_op:
            operator.append(i)

    operator = set(operator)

    operator_str = "Math Operators: "
    for i in operator:
        operator_str += i + ", "
    # print(operator_str[0: -2])
    return operator, operator_str[0: -2]



def func_logical_operator(chr):
    logic_op = ['and','or','not','<','>']
    logical_operator = []
    for i in chr:
        if i in logic_op:
            logical_operator.append(i)

    logical_operator = set(logical_operator)
    logicalop_str = "Logical Operators: "
    for i in logic_op:
        logicalop_str += i + ", "
    # print(logicalop_str[0:-2])
    return logical_operator, logicalop_str[0:-2]



def func_numerical(chr):
    numerical_val = []
    for i in chr:
        if ";" in i:
            i=i[:-1]
        if "," in i:
            i = i[:-1]

        try:
            if '.' in i:
                numerical_val.append(i)
            else:
                numerical_val.append(int(i))
        except ValueError:
            keyword.append(i)

    numerical_str = "Numerical Values: "
    # print(numerical_val)
    # return numerical_val, numerical_str[:-2]
    return numerical_val




def func_identifier_others(chr, keyword, operator, logical_operator, numerical_val):
    identifier = []
    others = []
    extra=[",",";","[","}","(",")"]
    for i in chr:
        if i not in keyword and i not in operator and i not in logical_operator and i not in numerical_val:
            if ord("a") <= ord(i[0]) <= ord("z") or ord("A") <= ord(i[0]) <= ord("Z") and i not in identifier:
                if ";" in i:
                    if i[-1] not in others:
                        others.append(i[-1])
                    i = i[:-1]

                if "," in i:
                    if i[-1] not in others:
                        others.append(i[-1])
                    i = i[:-1]

                if ")" in i:
                    if i[-1] not in others:
                        others.append(i[-1])
                    i = i[:-1]

                identifier.append(i)
            elif i not in keyword and i not in operator and i not in logical_operator and i not in numerical_val and i not in identifier:

                    if i[-1] in extra:
                        if i not in others:
                            others.append(i[-1])

    identifier = sorted(set(identifier))
    others = sorted(set(others))
    identifier_str = "Identifiers: "

    for i in identifier:
        identifier_str += i + ", "
    print(identifier_str)
    others_str = "Others: "
    for i in others:
        others_str += i + " "
    return identifier_str[0:-2], others_str









# Calling functions and printing
# keyword
keywords, keyword_string = key_func(chr,keyword)
print(keyword_string)

# math_operator
operators, operator_string = func_math_operator(chr)
print(operator_string)

#logical_operator
logical_operator, logical_operator_string = func_logical_operator(chr)
print('logical_operator:' , logical_operator)

#numerical_value
numerical_value= func_numerical(chr)
print("Numerical Values:",*numerical_value, sep = ", ")

# Identifier and others

identifier, others = func_identifier_others(chr, keyword_string, operator_string, logical_operator,numerical_value)

print(others)